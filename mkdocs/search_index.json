{
    "docs": [
        {
            "location": "/", 
            "text": "COSC370/570 Sample app\n\n\nIn UNE's \nUser Experience and Interaction Design\n course, students have a project where\nthey work on designing, prototyping, and creating a mobile app through term. \n\n\nOne of the options for developing your app is Android Studio, and so this is where we keep some notes (and a sample app) to encourage students to set up Android Studio before term. Terms are fairly short, so getting set up before term starts\nis always handy. And along the way, we can mention a few little things to expect.\n\n\nNote: you can also use iOS, Unity, Gluon, or React-Native in your project if you want to. We just haven't written sample apps and resources for those.\n\n\nWe will go through a lot of this in class, by the way. This is to give you a chance to get set up before term\neven starts.\n\n\nResources\n\n\n\n\n\n\nAndroid Studio\n, from Google  \n\n\nThey have very extensive documentation -- we're not going to try to replicate all that, but we'll give some introductions and shorter summaries as we want to get you up and running quickly\n\n\n\n\n\n\nSample app\n  \n\n\nThere are many sample apps out there to download and try, but it's useful for us to have one that we can point you to.\n\n\n\n\n\n\nUsed behind the scenes:\n \nGradle\n, which does the building.  \n\n\nAndroid Studio is the development environment, but behind the scenes it uses Gradle to build projects. Gradle makes it very easy, for instance, to include a library (eg, a Java physics library) in your app. You tell it the library you want, and it goes and gets it for you. Gradle also has extensive documentation, and intro videos.\n\n\nYou won't need to install Gradle yourself. Android Studio can usually fetch it for you. Just know that it's there and doing things for you behind the scenes. \n\n\n\n\n\n\nOptional:\n \nGit\n. You don't have to use this, but we mildly encourage it. \n\n\nGit gives programmers a way of tracking what they've changed in their code, reverting changes that didn't work, and \n  sharing their code with others. It was written for programmers though, so can be a bit confusing if you're new to it.\n\n\nIn our course, if you know what git is, I'd encourage you to use it. But if you don't know what git is, don't worry\n  about it - you don't have to use it. \n\n\nIf you have a bit of an idea what git is, but find remembering all its commands a pain, there's an app called \n  \nSourceTree\n that's a very good visual way of working with git.\n\n\n\n\n\n\nGetting set up\n\n\n\n\n\n\nInstall Android Studio\n  \n\n\nFirst, download and install \nAndroid Studio\n. \n\n\nUNE students will probably find it feels somewhat familiar -- Android Studio is based on IntelliJ, which students\nwill have used in COSC220 Software Design studio 2. \n\n\nIf you haven't used it before, just think of it as a really \nsmart editor that understands what you're typing, and has buttons for most of the other tools you'll use along\nthe way (such as the build tools that turn your code into a packaged program, and the emulator that can let you run\na virtual Android phone on your computer) \n\n\nThe Android site has a fairly detailed \nworkflow\n of steps, to\nget set up, create an app, etc. But usually, things \"just work\", so let's just describe the short version here.\n\n\nCreate a new project. Just select the default option in every pane of the wizard. We're just checking your tools are\nset up and working, not creating the next bestseller app (yet).\n\n\n\n\n\n\nRun Android Studio's hello world app\n\n\nBefore pulling down our app, just try running the little app you've created. There's a green play button in the top toolbar of the IDE, and it'll have a \"Run\" tooltip if you hover over it. Click that button.\n\n\nWhy? Well, even building and running this little program will make sure Android Studio has the \"SDK\" installed \ncorrectly, as well as an emulator.\n\n\nThe SDK is the set of tools that actually do the hard work of compiling and packaging your program. Android Studio\ndoesn't call them directly -- instead it calls Gradle, which then calls the programs in the SDK... there's a fairly complex set of stuff behind that little green play button, but usually it just works.\n\n\nAndroid Studio should also ask you where you want to run your app. For the moment,\nuse the emulator (a phone running in software on your computer), and choose the default phone it offers you \n(usually a Nexus 5). This is going to let us try starting the emulator. \n\n\nNote: \nIf your computer has an Intel processor, it will usually ask you to install HAXM. This helps it to run the \nemulated phone faster, so is usually a good thing to install\n.\n\n\nAt this point, Android Studio will probably go off and fetch a version of Android to run on the emulated phone, and it\ncan be a little slow to boot up. All going well though, in a few minutes you should have a (very dull) app running on\nyour emulated phone.\n\n\nThere will also be a \"run\" area at the bottom of Android Studio with technical messages from the build tools about how its progress has been going. And some little buttons on the left hand side for terminate, re-run, and a few other useful commands.\n\n\n\n\n\n\nTry running it on your physical phone, if you have one\n\n\nIf you have an Android phone, enable developer mode on it. This usually involves a secret tap somewhere in the settings menu (eg, tapping on the software version number eight times). So just Google what it is for your phone. \n\n\nI should let you know that some apps (eg, Pokemon Go) might stop working while it's enabled. If I recall, Pokemon Go worries that you might cheat by adjusting your GPS location to make it seem like you're walking when you're not. But you can turn developer mode off when you don't need it, so it shouldn't be very problematic.\n\n\nWhen it's enabled, plug the phone in via USB to the computer. You might find that your phone and computer ask you for permission to enable USB debugging. Yes, this is you poking around in your program to see if you can get it working, so agree. And your computer might want to go and get some drivers for your phone. So you might need to wait while it does all that.\n\n\nWith it plugged in, stop your app on the emulator (you can close the emulator), and click the green play button again. This time, your phone should be one of the options. Try selecting that, and see if you can run the basic app on your phone.\n\n\n\n\n\n\nGet the sample app\n\n\nWe've put a little sample app of our own up on GitHub. It's at \nhttps://github.com/UNEcosc370/sampleAndroidApp\n.\n\n\nIf you have git, you can \"clone\" the app (getting the code and all its version history). If not, you can just download it as a zip file from that page, and then unzip it.\n\n\nIn Android Studio, click \"Open Project...\" and select the folder for the code you just downloaded. Choose the folder \nthat \ncontains\n \napp\n, \nbuild.gradle\n, and \ngradle\n. Android Studio should recognise this as an Android project, and\nask you if you want to open it in a new window or this window.\n\n\nNow try running this on the emulator, and on your phone, as you did before.\n\n\nThis is the sample app we'll use in the first week or two of the course for explaining the beginnings of Android.\nIt is really small (took an evening to write). But that gives us something small so we can poke and prod the different bits that make up a simple Android app, and find our way around, before we start to get more complicated and talk about sensors, storage, and all sorts of other stuff.\n\n\nIt also shows a curious thing about people's cognition, called the \nStroop effect\n.  It'll ask you to click buttons\nfor different colours, and you should find you're a little slower and less accurate at it if the word and the colour \ndon't match. (eg, \nRED\n). As this course is about designing technology for people, \nit seemed fitting to have an app that demonstrates something about cognition.\n\n\nTry the app out, and have a look at your results. We'll talk about it in class too.\n\n\nIn terms of bits of code to look at: \n\n\n\n\nStroopExperiment.java\n contains the code for tracking the experiment. It's just plain old Java code, nothing fancy about it.\n\n\nStroopExperimentFrag.java\n is the code for the buttons and labels that pop up on the screen to run the experiment.\n\n\nMainActivity.java\n is almost empty, but its the main window that the experiment appears in.\n\n\n\n\nBut we'll talk about all of this in class.\n\n\n\n\n\n\nIf it all worked\n\n\nHooray, the sometimes-frustrating bit of getting the tools set up seems to have worked for you. That's good news.\n\n\nIf it didn't all work...\n\n\nSilly as it sounds, often the first thing to do if you get a set-up problem is \"copy the error message and paste it \ninto Google\". If something has really gone wrong, usually you won't have been the first person to hit it, and often \na search for the error message can find where someone else has fixed that problem.\n\n\nWhen term has started, you'll have access to UNE's forums where you can do things like \"ask me\". \n\n\nBut in the mean-time, there's a little \nchat-room\n where you can post the problem you've encountered. There aren't many people around before term starts, so I can't guaruntee how quickly it'll get read,\nbut every week or so before term I'll pop my head in to see if there's any messages about mistakes in these instructions, or problems potential students seem to be having.", 
            "title": "Home"
        }, 
        {
            "location": "/#cosc370570-sample-app", 
            "text": "In UNE's  User Experience and Interaction Design  course, students have a project where\nthey work on designing, prototyping, and creating a mobile app through term.   One of the options for developing your app is Android Studio, and so this is where we keep some notes (and a sample app) to encourage students to set up Android Studio before term. Terms are fairly short, so getting set up before term starts\nis always handy. And along the way, we can mention a few little things to expect.  Note: you can also use iOS, Unity, Gluon, or React-Native in your project if you want to. We just haven't written sample apps and resources for those.  We will go through a lot of this in class, by the way. This is to give you a chance to get set up before term\neven starts.", 
            "title": "COSC370/570 Sample app"
        }, 
        {
            "location": "/#resources", 
            "text": "Android Studio , from Google    They have very extensive documentation -- we're not going to try to replicate all that, but we'll give some introductions and shorter summaries as we want to get you up and running quickly    Sample app     There are many sample apps out there to download and try, but it's useful for us to have one that we can point you to.    Used behind the scenes:   Gradle , which does the building.    Android Studio is the development environment, but behind the scenes it uses Gradle to build projects. Gradle makes it very easy, for instance, to include a library (eg, a Java physics library) in your app. You tell it the library you want, and it goes and gets it for you. Gradle also has extensive documentation, and intro videos.  You won't need to install Gradle yourself. Android Studio can usually fetch it for you. Just know that it's there and doing things for you behind the scenes.     Optional:   Git . You don't have to use this, but we mildly encourage it.   Git gives programmers a way of tracking what they've changed in their code, reverting changes that didn't work, and \n  sharing their code with others. It was written for programmers though, so can be a bit confusing if you're new to it.  In our course, if you know what git is, I'd encourage you to use it. But if you don't know what git is, don't worry\n  about it - you don't have to use it.   If you have a bit of an idea what git is, but find remembering all its commands a pain, there's an app called \n   SourceTree  that's a very good visual way of working with git.", 
            "title": "Resources"
        }, 
        {
            "location": "/#getting-set-up", 
            "text": "Install Android Studio     First, download and install  Android Studio .   UNE students will probably find it feels somewhat familiar -- Android Studio is based on IntelliJ, which students\nwill have used in COSC220 Software Design studio 2.   If you haven't used it before, just think of it as a really \nsmart editor that understands what you're typing, and has buttons for most of the other tools you'll use along\nthe way (such as the build tools that turn your code into a packaged program, and the emulator that can let you run\na virtual Android phone on your computer)   The Android site has a fairly detailed  workflow  of steps, to\nget set up, create an app, etc. But usually, things \"just work\", so let's just describe the short version here.  Create a new project. Just select the default option in every pane of the wizard. We're just checking your tools are\nset up and working, not creating the next bestseller app (yet).    Run Android Studio's hello world app  Before pulling down our app, just try running the little app you've created. There's a green play button in the top toolbar of the IDE, and it'll have a \"Run\" tooltip if you hover over it. Click that button.  Why? Well, even building and running this little program will make sure Android Studio has the \"SDK\" installed \ncorrectly, as well as an emulator.  The SDK is the set of tools that actually do the hard work of compiling and packaging your program. Android Studio\ndoesn't call them directly -- instead it calls Gradle, which then calls the programs in the SDK... there's a fairly complex set of stuff behind that little green play button, but usually it just works.  Android Studio should also ask you where you want to run your app. For the moment,\nuse the emulator (a phone running in software on your computer), and choose the default phone it offers you \n(usually a Nexus 5). This is going to let us try starting the emulator.   Note:  If your computer has an Intel processor, it will usually ask you to install HAXM. This helps it to run the \nemulated phone faster, so is usually a good thing to install .  At this point, Android Studio will probably go off and fetch a version of Android to run on the emulated phone, and it\ncan be a little slow to boot up. All going well though, in a few minutes you should have a (very dull) app running on\nyour emulated phone.  There will also be a \"run\" area at the bottom of Android Studio with technical messages from the build tools about how its progress has been going. And some little buttons on the left hand side for terminate, re-run, and a few other useful commands.    Try running it on your physical phone, if you have one  If you have an Android phone, enable developer mode on it. This usually involves a secret tap somewhere in the settings menu (eg, tapping on the software version number eight times). So just Google what it is for your phone.   I should let you know that some apps (eg, Pokemon Go) might stop working while it's enabled. If I recall, Pokemon Go worries that you might cheat by adjusting your GPS location to make it seem like you're walking when you're not. But you can turn developer mode off when you don't need it, so it shouldn't be very problematic.  When it's enabled, plug the phone in via USB to the computer. You might find that your phone and computer ask you for permission to enable USB debugging. Yes, this is you poking around in your program to see if you can get it working, so agree. And your computer might want to go and get some drivers for your phone. So you might need to wait while it does all that.  With it plugged in, stop your app on the emulator (you can close the emulator), and click the green play button again. This time, your phone should be one of the options. Try selecting that, and see if you can run the basic app on your phone.    Get the sample app  We've put a little sample app of our own up on GitHub. It's at  https://github.com/UNEcosc370/sampleAndroidApp .  If you have git, you can \"clone\" the app (getting the code and all its version history). If not, you can just download it as a zip file from that page, and then unzip it.  In Android Studio, click \"Open Project...\" and select the folder for the code you just downloaded. Choose the folder \nthat  contains   app ,  build.gradle , and  gradle . Android Studio should recognise this as an Android project, and\nask you if you want to open it in a new window or this window.  Now try running this on the emulator, and on your phone, as you did before.  This is the sample app we'll use in the first week or two of the course for explaining the beginnings of Android.\nIt is really small (took an evening to write). But that gives us something small so we can poke and prod the different bits that make up a simple Android app, and find our way around, before we start to get more complicated and talk about sensors, storage, and all sorts of other stuff.  It also shows a curious thing about people's cognition, called the  Stroop effect .  It'll ask you to click buttons\nfor different colours, and you should find you're a little slower and less accurate at it if the word and the colour \ndon't match. (eg,  RED ). As this course is about designing technology for people, \nit seemed fitting to have an app that demonstrates something about cognition.  Try the app out, and have a look at your results. We'll talk about it in class too.  In terms of bits of code to look at:    StroopExperiment.java  contains the code for tracking the experiment. It's just plain old Java code, nothing fancy about it.  StroopExperimentFrag.java  is the code for the buttons and labels that pop up on the screen to run the experiment.  MainActivity.java  is almost empty, but its the main window that the experiment appears in.   But we'll talk about all of this in class.", 
            "title": "Getting set up"
        }, 
        {
            "location": "/#if-it-all-worked", 
            "text": "Hooray, the sometimes-frustrating bit of getting the tools set up seems to have worked for you. That's good news.", 
            "title": "If it all worked"
        }, 
        {
            "location": "/#if-it-didnt-all-work", 
            "text": "Silly as it sounds, often the first thing to do if you get a set-up problem is \"copy the error message and paste it \ninto Google\". If something has really gone wrong, usually you won't have been the first person to hit it, and often \na search for the error message can find where someone else has fixed that problem.  When term has started, you'll have access to UNE's forums where you can do things like \"ask me\".   But in the mean-time, there's a little  chat-room  where you can post the problem you've encountered. There aren't many people around before term starts, so I can't guaruntee how quickly it'll get read,\nbut every week or so before term I'll pop my head in to see if there's any messages about mistakes in these instructions, or problems potential students seem to be having.", 
            "title": "If it didn't all work..."
        }
    ]
}